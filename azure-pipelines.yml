variables:
  lldbBuildId: 162

  setenvLinux: |
      export LLDB_ROOT=$(System.ArtifactsDirectory)/lldb-linux
      export PATH=$HOME/.cargo/bin:$LLDB_ROOT/bin:$PATH
      export ADAPTER_LOG=/tmp/adapter.log
  setenvOSX: |
      export LLDB_ROOT=$(System.ArtifactsDirectory)/lldb-osx
      export PATH=$HOME/.cargo/bin:$LLDB_ROOT/bin:$PATH
      export ADAPTER_LOG=/tmp/adapter.log
  setenvWindows: |
      set LLDB_ROOT=$(System.ArtifactsDirectory)\lldb-windows
      set PATH=%USERPROFILE%\.cargo\bin;%LLDB_ROOT%\bin;%PATH%
      set ADAPTER_LOG=%TEMP%\adapter.log
      set PYTHONHOME=%USEPYTHONVERSION_PYTHONLOCATION%
      set PYTHONPATH=%PYTHONHOME%\Lib;%PYTHONHOME%\DLLs

##########################################

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '8.x'
    displayName: 'Install Node.js'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: 'llvm-build'
      pipeline: 'vadimcn.llvm-build'
      buildVersionToDownload: specific
      buildId: $(lldbBuildId)
      downloadType: single
      artifactName: 'lldb-linux'
    displayName: 'Download LLDB'

  - script: |
      echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-x86_64-unknown-linux-gnu
      npm install
    displayName: 'Setup'

  - script: |
      $(setenvLinux)
      chmod +x $LLDB_ROOT/bin/*
      npm run build
    displayName: 'Build'

  - script: |
      $(setenvLinux)
      npm run test:adapter
    displayName: 'Test1'
    condition: always()

  - script: |
      $(setenvLinux)
      npm run test:adapter2
    displayName: 'Test2'
    condition: always()

  - script: |
      cat /tmp/adapter.log
      echo - env ------------------
      env
      echo - dir -----------------------
      ls -R $(System.ArtifactsDirectory)
    displayName: 'On Failure'
    condition: failed()

##########################################

- job: OSX
  pool:
    vmImage: 'macOS 10.13'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '8.x'
    displayName: 'Install Node.js'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: 'llvm-build'
      pipeline: 'vadimcn.llvm-build'
      buildVersionToDownload: specific
      buildId: $(lldbBuildId)
      downloadType: single
      artifactName: 'lldb-osx'
    displayName: 'Download LLDB'

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-x86_64-apple-darwin
      npm install
    displayName: 'Setup'

  # - script: |
  #     ls -l `which lldb`
  #     find / -name debugserver
  #   displayName: 'Info'

  - script: |
      $(setenvOSX)
      cp $XCODE_10_DEVELOPER_DIR/../SharedFrameworks/LLDB.framework/Versions/A/Resources/debugserver $LLDB_ROOT/bin
      chmod +x $LLDB_ROOT/bin/*
      npm run build
    displayName: 'Build'

  - script: |
      $(setenvOSX)
      npm run test:adapter
    displayName: 'Test1'
    condition: always()

  - script: |
      $(setenvOSX)
      npm run test:adapter2
    displayName: 'Test2'
    condition: always()

  - script: |
      cat /tmp/adapter.log
      echo - env ------------------
      env
      echo - dir -----------------------
      ls -R $(System.ArtifactsDirectory)
    displayName: 'On Failure'
    condition: failed()

 ##########################################

- job: Windows
  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '8.x'
    displayName: 'Install Node.js'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      addToPath: true
      architecture: 'x64'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: 'llvm-build'
      pipeline: 'vadimcn.llvm-build'
      buildVersionToDownload: specific
      buildId: $(lldbBuildId)
      downloadType: single
      artifactName: 'lldb-windows'
    displayName: 'Download LLDB'

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-x86_64-pc-windows-gnu
      npm install
    displayName: 'Setup'

  - script: |
      $(setenvWindows)
      npm run build
    displayName: 'Build'

  - script: |
      $(setenvWindows)
      npm run test:adapter
    displayName: 'Test1'
    condition: always()

  - script: |
      $(setenvWindows)
      npm run test:adapter2
    displayName: 'Test2'
    condition: always()

  - script: |
      type %TEMP%\adapter.log
      echo - env ------------------
      set
      echo - dir -----------------------
      dir /s $(System.ArtifactsDirectory)
      echo -----------------------------
      env
      echo -----------------------------
      ls -R $(System.ArtifactsDirectory)
    displayName: 'On Failure'
    condition: failed()

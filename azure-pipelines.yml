variables:
  lldbBuildId: 275
  runTests: true

  setenvLinux: |
      export PATH=$HOME/.cargo/bin:$PATH
  setenvOSX: |
      export PATH=$HOME/.cargo/bin:$PATH
  setenvWindows: |
      set PATH=%USERPROFILE%\.cargo\bin;%PATH%
      set PYTHONHOME=%USEPYTHONVERSION_PYTHONLOCATION%
      set PYTHONPATH=%PYTHONHOME%\Lib;%PYTHONHOME%\DLLs

##########################################

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '8.x'
    displayName: 'Install Node.js'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: 'llvm-build'
      pipeline: 'vadimcn.llvm-build'
      buildVersionToDownload: specific
      buildId: $(lldbBuildId)
      downloadType: single
      artifactName: 'lldb'
      itemPattern: 'lldb/lldb-linux.zip'
      downloadPath: '$(Agent.WorkFolder)/D'
    displayName: 'Download LLDB'

  - script: |
      unzip $(Agent.WorkFolder)/D/lldb/lldb-linux.zip -d $(Agent.WorkFolder)/D/lldb-linux
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-x86_64-unknown-linux-gnu
      echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
      npm install
      sudo npm install -g vsce
    displayName: 'Install'

  - script: |
      $(setenvLinux)
      mkdir build
      cd build
      cmake -DLLDB_ROOT=$(Agent.WorkFolder)/D/lldb-linux ..
    displayName: 'Configure'

  - script: |
      $(setenvLinux)
      cmake --build build --target vsix_portable
      cmake -E copy build/vscode-lldb-portable.vsix $(Build.ArtifactStagingDirectory)/vscode-lldb-portable.vsix
      cmake --build build --target vsix_full
      cmake -E copy build/vscode-lldb-full.vsix $(Build.ArtifactStagingDirectory)/vscode-lldb-linux.vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'vscode-lldb'

  - script: |
      $(setenvLinux)
      export ADAPTER_LOG=/tmp/adapter.test.log
      cmake --build build --target test_adapter
    displayName: 'Test1'
    condition: variables.runTests

  - script: |
      $(setenvLinux)
      export ADAPTER_LOG=/tmp/adapter2.test.log
      cmake --build build --target test_adapter
    displayName: 'Test2'
    condition: variables.runTests

  - script: |
      cat /tmp/adapter.test.log
      echo ------------------------
      cat /tmp/adapter2.test.log
      echo - env ------------------
      env
      echo - dir -----------------------
      ls -R $(System.ArtifactsDirectory)
    displayName: 'On Failure'
    condition: failed()

##########################################

- job: OSX
  pool:
    vmImage: 'macOS 10.13'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '8.x'
    displayName: 'Install Node.js'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: 'llvm-build'
      pipeline: 'vadimcn.llvm-build'
      buildVersionToDownload: specific
      buildId: $(lldbBuildId)
      downloadType: single
      artifactName: 'lldb'
      itemPattern: 'lldb/lldb-osx.zip'
      downloadPath: '$(Agent.WorkFolder)/D'
    displayName: 'Download LLDB'

  - script: |
      unzip $(Agent.WorkFolder)/D/lldb/lldb-osx.zip -d $(Agent.WorkFolder)/D/lldb-osx
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-x86_64-apple-darwin
      npm install
      sudo npm install -g vsce
    displayName: 'Install'

  - script: |
      $(setenvOSX)
      mkdir build
      cd build
      cmake -DLLDB_ROOT=$(Agent.WorkFolder)/D/lldb-osx ..
    displayName: 'Configure'

  - script: |
      $(setenvOSX)
      cmake --build build --target vsix_full
      cmake -E copy build/vscode-lldb-full.vsix $(Build.ArtifactStagingDirectory)/vscode-lldb-osx.vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'vscode-lldb'

  - script: |
      $(setenvOSX)
      export ADAPTER_LOG=/tmp/adapter.test.log
      cmake --build build --target test_adapter
    displayName: 'Test1'
    condition: variables.runTests

  - script: |
      $(setenvOSX)
      export ADAPTER_LOG=/tmp/adapter2.test.log
      cmake --build build --target test_adapter2
    displayName: 'Test2'
    condition: variables.runTests

  - script: |
      cat /tmp/adapter.test.log
      echo ------------------------
      cat /tmp/adapter2.test.log
      echo - env ------------------
      env
      echo - dir -----------------------
      ls -R $(System.ArtifactsDirectory)
    displayName: 'On Failure'
    condition: failed()

 ##########################################

- job: Windows
  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '8.x'
    displayName: 'Install Node.js'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      addToPath: true
      architecture: 'x64'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: 'llvm-build'
      pipeline: 'vadimcn.llvm-build'
      buildVersionToDownload: specific
      buildId: $(lldbBuildId)
      downloadType: single
      artifactName: 'lldb'
      itemPattern: 'lldb/lldb-windows.zip'
      downloadPath: '$(Agent.WorkFolder)/D'
    displayName: 'Download LLDB'

  - script: |
      choco install zip
      unzip $(Agent.WorkFolder)/D/lldb/lldb-windows.zip -d $(Agent.WorkFolder)/D/lldb-windows
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-x86_64-pc-windows-msvc
      set PATH=%USERPROFILE%\.cargo\bin;%PATH%
      rustup toolchain add nightly-x86_64-pc-windows-gnu
      curl https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip -o $(Agent.WorkFolder)/D/ninja-win.zip
      unzip $(Agent.WorkFolder)/D/ninja-win.zip -d %USERPROFILE%\.cargo\bin
      call npm install
      call npm install -g vsce
    displayName: 'Install'

  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -arch=amd64 -host_arch=amd64
      modifyEnvironment: true
    displayName: VsDevCmd

  - script: |
      $(setenvWindows)
      mkdir build
      cd build
      cmake -GNinja^
            -DLLDB_ROOT=$(Agent.WorkFolder)\D\lldb-windows^
            -DCMAKE_C_COMPILER=cl^
            -DCMAKE_CXX_COMPILER=cl^
            ..
    displayName: 'Configure'

  - script: |
      $(setenvWindows)
      cmake --build build --target vsix_full
      cmake -E copy build/vscode-lldb-full.vsix $(Build.ArtifactStagingDirectory)/vscode-lldb-windows.vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'vscode-lldb'

  - script: |
      $(setenvWindows)
      set ADAPTER_LOG=%TEMP%\adapter.test.log
      cmake --build build --target test_adapter_gnu
    displayName: 'Test1 GNU'
    condition: variables.runTests

  - script: |
      $(setenvWindows)
      set ADAPTER_LOG=%TEMP%\adapter2.test.log
      cmake --build build --target test_adapter2_gnu
    displayName: 'Test2 GNU'
    condition: variables.runTests

  - script: |
      $(setenvWindows)
      set ADAPTER_LOG=%TEMP%\adapter.test.log
      cmake --build build --target test_adapter_msvc
    displayName: 'Test1 MSVC'
    condition: variables.runTests

  - script: |
      $(setenvWindows)
      set ADAPTER_LOG=%TEMP%\adapter2.test.log
      cmake --build build --target test_adapter2_msvc
    displayName: 'Test2 MSVC'
    condition: variables.runTests

  - script: |
      type %TEMP%\adapter.test.log
      echo ------------------------
      type %TEMP%\adapter2.test.log
      echo - env ------------------
      env
      echo - dir -----------------------
      ls -R $(System.ArtifactsDirectory)
      echo - dir -----------------------
      ls -R
    displayName: 'On Failure'
    condition: failed()
